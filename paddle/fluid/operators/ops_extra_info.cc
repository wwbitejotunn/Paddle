// This file is generated by paddle/phi/api/yaml/generator/ops_extra_info_gen.py
#include "paddle/fluid/operators/ops_extra_info.h"

#include "paddle/fluid/platform/cudnn_workspace_helper.h"

namespace paddle {
namespace operators {

ExtraInfoUtils::ExtraInfoUtils() {
  g_extra_attrs_map_ = {
    {"abs", { {"use_cudnn", bool{false}}, {"use_mkldnn", bool{false}} }},
    {"abs_grad", { {"use_cudnn", bool{false}}, {"use_mkldnn", bool{false}} }},
    {"addmm", { {"use_mkldnn", bool{false}} }},
    {"addmm_grad", { {"use_mkldnn", bool{false}} }},
    {"affine_grid", { {"use_cudnn", bool{true}} }},
    {"affine_grid_grad", { {"use_cudnn", bool{true}} }},
    {"angle", { {"use_cudnn", bool{false}}, {"use_mkldnn", bool{false}} }},
    {"angle_grad", { {"use_cudnn", bool{false}}, {"use_mkldnn", bool{false}} }},
    {"batch_norm", { {"use_mkldnn", bool{false}}, {"fuse_with_relu", bool{false}} }},
    {"batch_norm_grad", { {"use_mkldnn", bool{false}}, {"fuse_with_relu", bool{false}} }},
    {"bicubic_interp_v2", { {"use_mkldnn", bool{false}} }},
    {"bicubic_interp_v2_grad", { {"use_mkldnn", bool{false}} }},
    {"bilinear_interp_v2", { {"use_mkldnn", bool{false}} }},
    {"bilinear_interp_v2_grad", { {"use_mkldnn", bool{false}} }},
    {"clip", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}} }},
    {"clip_grad", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}} }},
    {"concat", { {"use_mkldnn", bool{false}}, {"use_quantizer", bool{false}}, {"mkldnn_data_type", std::string{"float32"}} }},
    {"concat_grad", { {"use_mkldnn", bool{false}}, {"use_quantizer", bool{false}}, {"mkldnn_data_type", std::string{"float32"}} }},
    {"conv2d", { {"is_test", bool{false}}, {"use_cudnn", bool{true}}, {"fuse_relu_before_depthwise_conv", bool{false}}, {"use_mkldnn", bool{false}}, {"use_quantizer", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"fuse_relu", bool{false}}, {"fuse_activation", std::string{""}}, {"fuse_alpha", float{0.0f}}, {"fuse_beta", float{0.0f}}, {"use_addto", bool{false}}, {"fuse_residual_connection", bool{false}}, {"Scale_in", float{1.0f}}, {"Scale_out", float{1.0f}}, {"Scale_in_eltwise", float{1.0f}}, {"Scale_weights", std::vector<float>{1.0f}}, {"force_fp32_output", bool{false}}, {"workspace_size_MB", int{platform::GetDefaultConvWorkspaceSizeLimitMB()}}, {"exhaustive_search", bool{false}} }},
    {"conv2d_grad", { {"is_test", bool{false}}, {"use_cudnn", bool{true}}, {"fuse_relu_before_depthwise_conv", bool{false}}, {"use_mkldnn", bool{false}}, {"use_quantizer", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"fuse_relu", bool{false}}, {"fuse_activation", std::string{""}}, {"fuse_alpha", float{0.0f}}, {"fuse_beta", float{0.0f}}, {"use_addto", bool{false}}, {"fuse_residual_connection", bool{false}}, {"Scale_in", float{1.0f}}, {"Scale_out", float{1.0f}}, {"Scale_in_eltwise", float{1.0f}}, {"Scale_weights", std::vector<float>{1.0f}}, {"force_fp32_output", bool{false}}, {"workspace_size_MB", int{platform::GetDefaultConvWorkspaceSizeLimitMB()}}, {"exhaustive_search", bool{false}} }},
    {"conv2d_fusion", { {"is_test", bool{false}}, {"use_cudnn", bool{false}}, {"fuse_relu_before_depthwise_conv", bool{false}}, {"use_mkldnn", bool{false}}, {"use_quantizer", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"fuse_relu", bool{false}}, {"fuse_activation", std::string{""}}, {"fuse_alpha", float{0.0f}}, {"fuse_beta", float{0.0f}}, {"use_addto", bool{false}}, {"fuse_residual_connection", bool{false}}, {"Scale_in", float{1.0f}}, {"Scale_out", float{1.0f}}, {"Scale_in_eltwise", float{1.0f}}, {"Scale_weights", std::vector<float>{1.0f}}, {"force_fp32_output", bool{false}}, {"workspace_size_MB", int{platform::GetDefaultConvWorkspaceSizeLimitMB()}}, {"exhaustive_search", bool{false}} }},
    {"conv2d_transpose", { {"is_test", bool{false}}, {"use_cudnn", bool{true}}, {"use_mkldnn", bool{false}}, {"force_fp32_output", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"fuse_relu", bool{false}}, {"fuse_activation", std::string{""}}, {"fuse_alpha", float{0.0f}}, {"fuse_beta", float{0.0f}}, {"workspace_size_MB", int{platform::GetDefaultConvWorkspaceSizeLimitMB()}} }},
    {"conv2d_transpose_grad", { {"is_test", bool{false}}, {"use_cudnn", bool{true}}, {"use_mkldnn", bool{false}}, {"force_fp32_output", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"fuse_relu", bool{false}}, {"fuse_activation", std::string{""}}, {"fuse_alpha", float{0.0f}}, {"fuse_beta", float{0.0f}}, {"workspace_size_MB", int{platform::GetDefaultConvWorkspaceSizeLimitMB()}} }},
    {"conv3d", { {"is_test", bool{false}}, {"use_cudnn", bool{true}}, {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"fuse_relu", bool{false}}, {"fuse_activation", std::string{""}}, {"fuse_alpha", float{0.0f}}, {"fuse_beta", float{0.0f}}, {"use_addto", bool{false}}, {"fuse_residual_connection", bool{false}}, {"force_fp32_output", bool{false}}, {"workspace_size_MB", int{platform::GetDefaultConvWorkspaceSizeLimitMB()}}, {"exhaustive_search", bool{false}} }},
    {"conv3d_grad", { {"is_test", bool{false}}, {"use_cudnn", bool{true}}, {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"fuse_relu", bool{false}}, {"fuse_activation", std::string{""}}, {"fuse_alpha", float{0.0f}}, {"fuse_beta", float{0.0f}}, {"use_addto", bool{false}}, {"fuse_residual_connection", bool{false}}, {"force_fp32_output", bool{false}}, {"workspace_size_MB", int{platform::GetDefaultConvWorkspaceSizeLimitMB()}}, {"exhaustive_search", bool{false}} }},
    {"conv3d_transpose", { {"use_cudnn", bool{true}}, {"use_mkldnn", bool{false}}, {"workspace_size_MB", int{platform::GetDefaultConvWorkspaceSizeLimitMB()}} }},
    {"conv3d_transpose_grad", { {"use_cudnn", bool{true}}, {"use_mkldnn", bool{false}}, {"workspace_size_MB", int{platform::GetDefaultConvWorkspaceSizeLimitMB()}} }},
    {"data_norm", { {"use_mkldnn", bool{false}} }},
    {"data_norm_grad", { {"use_mkldnn", bool{false}} }},
    {"depthwise_conv2d", { {"is_test", bool{false}}, {"fuse_relu_before_depthwise_conv", bool{false}}, {"use_mkldnn", bool{false}}, {"use_quantizer", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"fuse_relu", bool{false}}, {"fuse_activation", std::string{""}}, {"fuse_alpha", float{0.0f}}, {"fuse_beta", float{0.0f}}, {"use_addto", bool{false}}, {"fuse_residual_connection", bool{false}}, {"Scale_in", float{1.0f}}, {"Scale_out", float{1.0f}}, {"Scale_in_eltwise", float{1.0f}}, {"Scale_weights", std::vector<float>{1.0f}}, {"force_fp32_output", bool{false}}, {"workspace_size_MB", int{platform::GetDefaultConvWorkspaceSizeLimitMB()}}, {"exhaustive_search", bool{false}} }},
    {"depthwise_conv2d_grad", { {"is_test", bool{false}}, {"fuse_relu_before_depthwise_conv", bool{false}}, {"use_mkldnn", bool{false}}, {"use_quantizer", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"fuse_relu", bool{false}}, {"fuse_activation", std::string{""}}, {"fuse_alpha", float{0.0f}}, {"fuse_beta", float{0.0f}}, {"use_addto", bool{false}}, {"fuse_residual_connection", bool{false}}, {"Scale_in", float{1.0f}}, {"Scale_out", float{1.0f}}, {"Scale_in_eltwise", float{1.0f}}, {"Scale_weights", std::vector<float>{1.0f}}, {"force_fp32_output", bool{false}}, {"workspace_size_MB", int{platform::GetDefaultConvWorkspaceSizeLimitMB()}}, {"exhaustive_search", bool{false}} }},
    {"depthwise_conv2d_transpose", { {"is_test", bool{false}}, {"use_cudnn", bool{false}}, {"use_mkldnn", bool{false}}, {"force_fp32_output", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"fuse_relu", bool{false}}, {"fuse_activation", std::string{""}}, {"fuse_alpha", float{0.0f}}, {"fuse_beta", float{0.0f}}, {"workspace_size_MB", int{platform::GetDefaultConvWorkspaceSizeLimitMB()}} }},
    {"depthwise_conv2d_transpose_grad", { {"is_test", bool{false}}, {"use_cudnn", bool{false}}, {"use_mkldnn", bool{false}}, {"force_fp32_output", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"fuse_relu", bool{false}}, {"fuse_activation", std::string{""}}, {"fuse_alpha", float{0.0f}}, {"fuse_beta", float{0.0f}}, {"workspace_size_MB", int{platform::GetDefaultConvWorkspaceSizeLimitMB()}} }},
    {"dropout", { {"fix_seed", bool{false}}, {"seed", int{0}} }},
    {"dropout_grad", { {"fix_seed", bool{false}}, {"seed", int{0}} }},
    {"dropout_nd", { {"fix_seed", bool{false}}, {"seed", int{0}} }},
    {"dropout_nd_grad", { {"fix_seed", bool{false}}, {"seed", int{0}} }},
    {"gelu", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"use_cudnn", bool{false}} }},
    {"gelu_grad", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"use_cudnn", bool{false}} }},
    {"grid_sampler", { {"use_cudnn", bool{true}} }},
    {"grid_sampler_grad", { {"use_cudnn", bool{true}} }},
    {"gru", { {"is_test", bool{false}} }},
    {"gru_grad", { {"is_test", bool{false}} }},
    {"inplace_abn", { {"use_mkldnn", bool{false}}, {"fuse_with_relu", bool{false}} }},
    {"inplace_abn_grad", { {"use_mkldnn", bool{false}}, {"fuse_with_relu", bool{false}} }},
    {"layer_norm", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"is_test", bool{false}} }},
    {"layer_norm_grad", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"is_test", bool{false}} }},
    {"linear_interp_v2", { {"use_mkldnn", bool{false}} }},
    {"linear_interp_v2_grad", { {"use_mkldnn", bool{false}} }},
    {"log_softmax", { {"use_mkldnn", bool{false}} }},
    {"log_softmax_grad", { {"use_mkldnn", bool{false}} }},
    {"lrn", { {"use_mkldnn", bool{false}}, {"is_test", bool{false}} }},
    {"lrn_grad", { {"use_mkldnn", bool{false}}, {"is_test", bool{false}} }},
    {"nearest_interp_v2", { {"use_mkldnn", bool{false}} }},
    {"nearest_interp_v2_grad", { {"use_mkldnn", bool{false}} }},
    {"pad2d", { {"use_mkldnn", bool{false}} }},
    {"pad2d_grad", { {"use_mkldnn", bool{false}} }},
    {"pad3d", { {"use_mkldnn", bool{false}} }},
    {"pad3d_grad", { {"use_mkldnn", bool{false}} }},
    {"partial_sum", { {"use_mkldnn", bool{false}} }},
    {"partial_sum_grad", { {"use_mkldnn", bool{false}} }},
    {"prelu", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"is_test", bool{false}} }},
    {"prelu_grad", { {"use_mkldnn", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"is_test", bool{false}} }},
    {"renorm", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"renorm_grad", { {"use_mkldnn", bool{false}}, {"use_cudnn", bool{false}} }},
    {"stack", { {"use_mkldnn", bool{false}} }},
    {"stack_grad", { {"use_mkldnn", bool{false}} }},
    {"sync_batch_norm", { {"use_mkldnn", bool{false}}, {"fuse_with_relu", bool{false}} }},
    {"sync_batch_norm_grad", { {"use_mkldnn", bool{false}}, {"fuse_with_relu", bool{false}} }},
    {"trilinear_interp_v2", { {"use_mkldnn", bool{false}} }},
    {"trilinear_interp_v2_grad", { {"use_mkldnn", bool{false}} }}
  };

  g_extra_attrs_checker_ = {
    {"abs", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"abs_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"addmm", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"addmm_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"affine_grid", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", true)(attr_map, only_check_exist_value);} }},
    {"affine_grid_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", true)(attr_map, only_check_exist_value);} }},
    {"angle", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"angle_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"batch_norm", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_with_relu", false)(attr_map, only_check_exist_value);} }},
    {"batch_norm_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_with_relu", false)(attr_map, only_check_exist_value);} }},
    {"bicubic_interp_v2", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"bicubic_interp_v2_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"bilinear_interp_v2", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"bilinear_interp_v2_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"clip", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);} }},
    {"clip_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);} }},
    {"concat", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_quantizer", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);} }},
    {"concat_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_quantizer", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);} }},
    {"conv2d", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("is_test", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", true)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_relu_before_depthwise_conv", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_quantizer", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_relu", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("fuse_activation", "")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_alpha", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_beta", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_addto", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_residual_connection", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_in", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_out", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_in_eltwise", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::vector<float>>("Scale_weights", {1.0f})(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("force_fp32_output", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("workspace_size_MB", platform::GetDefaultConvWorkspaceSizeLimitMB())(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("exhaustive_search", false)(attr_map, only_check_exist_value);} }},
    {"conv2d_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("is_test", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", true)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_relu_before_depthwise_conv", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_quantizer", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_relu", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("fuse_activation", "")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_alpha", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_beta", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_addto", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_residual_connection", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_in", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_out", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_in_eltwise", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::vector<float>>("Scale_weights", {1.0f})(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("force_fp32_output", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("workspace_size_MB", platform::GetDefaultConvWorkspaceSizeLimitMB())(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("exhaustive_search", false)(attr_map, only_check_exist_value);} }},
    {"conv2d_fusion", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("is_test", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_relu_before_depthwise_conv", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_quantizer", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_relu", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("fuse_activation", "")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_alpha", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_beta", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_addto", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_residual_connection", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_in", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_out", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_in_eltwise", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::vector<float>>("Scale_weights", {1.0f})(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("force_fp32_output", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("workspace_size_MB", platform::GetDefaultConvWorkspaceSizeLimitMB())(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("exhaustive_search", false)(attr_map, only_check_exist_value);} }},
    {"conv2d_transpose", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("is_test", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", true)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("force_fp32_output", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_relu", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("fuse_activation", "")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_alpha", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_beta", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("workspace_size_MB", platform::GetDefaultConvWorkspaceSizeLimitMB())(attr_map, only_check_exist_value);} }},
    {"conv2d_transpose_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("is_test", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", true)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("force_fp32_output", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_relu", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("fuse_activation", "")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_alpha", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_beta", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("workspace_size_MB", platform::GetDefaultConvWorkspaceSizeLimitMB())(attr_map, only_check_exist_value);} }},
    {"conv3d", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("is_test", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", true)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_relu", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("fuse_activation", "")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_alpha", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_beta", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_addto", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_residual_connection", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("force_fp32_output", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("workspace_size_MB", platform::GetDefaultConvWorkspaceSizeLimitMB())(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("exhaustive_search", false)(attr_map, only_check_exist_value);} }},
    {"conv3d_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("is_test", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", true)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_relu", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("fuse_activation", "")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_alpha", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_beta", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_addto", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_residual_connection", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("force_fp32_output", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("workspace_size_MB", platform::GetDefaultConvWorkspaceSizeLimitMB())(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("exhaustive_search", false)(attr_map, only_check_exist_value);} }},
    {"conv3d_transpose", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", true)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("workspace_size_MB", platform::GetDefaultConvWorkspaceSizeLimitMB())(attr_map, only_check_exist_value);} }},
    {"conv3d_transpose_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", true)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("workspace_size_MB", platform::GetDefaultConvWorkspaceSizeLimitMB())(attr_map, only_check_exist_value);} }},
    {"data_norm", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"data_norm_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"depthwise_conv2d", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("is_test", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_relu_before_depthwise_conv", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_quantizer", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_relu", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("fuse_activation", "")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_alpha", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_beta", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_addto", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_residual_connection", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_in", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_out", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_in_eltwise", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::vector<float>>("Scale_weights", {1.0f})(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("force_fp32_output", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("workspace_size_MB", platform::GetDefaultConvWorkspaceSizeLimitMB())(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("exhaustive_search", false)(attr_map, only_check_exist_value);} }},
    {"depthwise_conv2d_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("is_test", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_relu_before_depthwise_conv", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_quantizer", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_relu", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("fuse_activation", "")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_alpha", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_beta", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_addto", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_residual_connection", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_in", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_out", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_in_eltwise", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::vector<float>>("Scale_weights", {1.0f})(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("force_fp32_output", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("workspace_size_MB", platform::GetDefaultConvWorkspaceSizeLimitMB())(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("exhaustive_search", false)(attr_map, only_check_exist_value);} }},
    {"depthwise_conv2d_transpose", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("is_test", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("force_fp32_output", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_relu", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("fuse_activation", "")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_alpha", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_beta", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("workspace_size_MB", platform::GetDefaultConvWorkspaceSizeLimitMB())(attr_map, only_check_exist_value);} }},
    {"depthwise_conv2d_transpose_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("is_test", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("force_fp32_output", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_relu", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("fuse_activation", "")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_alpha", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_beta", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("workspace_size_MB", platform::GetDefaultConvWorkspaceSizeLimitMB())(attr_map, only_check_exist_value);} }},
    {"dropout", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fix_seed", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("seed", 0)(attr_map, only_check_exist_value);} }},
    {"dropout_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fix_seed", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("seed", 0)(attr_map, only_check_exist_value);} }},
    {"dropout_nd", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fix_seed", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("seed", 0)(attr_map, only_check_exist_value);} }},
    {"dropout_nd_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fix_seed", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("seed", 0)(attr_map, only_check_exist_value);} }},
    {"gelu", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"gelu_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"grid_sampler", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", true)(attr_map, only_check_exist_value);} }},
    {"grid_sampler_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", true)(attr_map, only_check_exist_value);} }},
    {"gru", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("is_test", false)(attr_map, only_check_exist_value);} }},
    {"gru_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("is_test", false)(attr_map, only_check_exist_value);} }},
    {"inplace_abn", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_with_relu", false)(attr_map, only_check_exist_value);} }},
    {"inplace_abn_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_with_relu", false)(attr_map, only_check_exist_value);} }},
    {"layer_norm", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("is_test", false)(attr_map, only_check_exist_value);} }},
    {"layer_norm_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("is_test", false)(attr_map, only_check_exist_value);} }},
    {"linear_interp_v2", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"linear_interp_v2_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"log_softmax", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"log_softmax_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"lrn", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("is_test", false)(attr_map, only_check_exist_value);} }},
    {"lrn_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("is_test", false)(attr_map, only_check_exist_value);} }},
    {"nearest_interp_v2", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"nearest_interp_v2_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"pad2d", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"pad2d_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"pad3d", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"pad3d_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"partial_sum", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"partial_sum_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"prelu", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("is_test", false)(attr_map, only_check_exist_value);} }},
    {"prelu_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("is_test", false)(attr_map, only_check_exist_value);} }},
    {"renorm", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"renorm_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);} }},
    {"stack", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"stack_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"sync_batch_norm", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_with_relu", false)(attr_map, only_check_exist_value);} }},
    {"sync_batch_norm_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_with_relu", false)(attr_map, only_check_exist_value);} }},
    {"trilinear_interp_v2", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }},
    {"trilinear_interp_v2_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);} }}
  };
}

}  // namespace operators
}  // namespace paddle
