// This file is generated by paddle/phi/api/yaml/generator/ops_extra_info_gen.py
#include "paddle/fluid/operators/ops_extra_info.h"

#include "paddle/fluid/platform/cudnn_workspace_helper.h"

namespace paddle {
namespace operators {

ExtraInfoUtils::ExtraInfoUtils() {
  g_extra_attrs_map_ = {
    {"conv2d", { {"use_cudnn", bool{false}}, {"fuse_relu_before_depthwise_conv", bool{false}}, {"use_mkldnn", bool{false}}, {"use_quantizer", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"fuse_relu", bool{false}}, {"fuse_activation", std::string{""}}, {"fuse_alpha", float{0.0f}}, {"fuse_beta", float{0.0f}}, {"use_addto", bool{false}}, {"fuse_residual_connection", bool{false}}, {"Scale_in", float{1.0f}}, {"Scale_out", float{1.0f}}, {"Scale_in_eltwise", float{1.0f}}, {"Scale_weights", std::vector<float>{1.0f}}, {"force_fp32_output", bool{false}}, {"workspace_size_MB", int{512}}, {"exhaustive_search", bool{false}} }},
    {"conv2d_grad", { {"use_cudnn", bool{false}}, {"fuse_relu_before_depthwise_conv", bool{false}}, {"use_mkldnn", bool{false}}, {"use_quantizer", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"fuse_relu", bool{false}}, {"fuse_activation", std::string{""}}, {"fuse_alpha", float{0.0f}}, {"fuse_beta", float{0.0f}}, {"use_addto", bool{false}}, {"fuse_residual_connection", bool{false}}, {"Scale_in", float{1.0f}}, {"Scale_out", float{1.0f}}, {"Scale_in_eltwise", float{1.0f}}, {"Scale_weights", std::vector<float>{1.0f}}, {"force_fp32_output", bool{false}}, {"workspace_size_MB", int{512}}, {"exhaustive_search", bool{false}} }},
    {"conv2d_fusion", { {"use_cudnn", bool{false}}, {"fuse_relu_before_depthwise_conv", bool{false}}, {"use_mkldnn", bool{false}}, {"use_quantizer", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"fuse_relu", bool{false}}, {"fuse_activation", std::string{""}}, {"fuse_alpha", float{0.0f}}, {"fuse_beta", float{0.0f}}, {"use_addto", bool{false}}, {"fuse_residual_connection", bool{false}}, {"Scale_in", float{1.0f}}, {"Scale_out", float{1.0f}}, {"Scale_in_eltwise", float{1.0f}}, {"Scale_weights", std::vector<float>{1.0f}}, {"force_fp32_output", bool{false}}, {"workspace_size_MB", int{512}}, {"exhaustive_search", bool{false}} }},
    {"depthwise_conv2d", { {"use_cudnn", bool{false}}, {"fuse_relu_before_depthwise_conv", bool{false}}, {"use_mkldnn", bool{false}}, {"use_quantizer", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"fuse_relu", bool{false}}, {"fuse_activation", std::string{""}}, {"fuse_alpha", float{0.0f}}, {"fuse_beta", float{0.0f}}, {"use_addto", bool{false}}, {"fuse_residual_connection", bool{false}}, {"Scale_in", float{1.0f}}, {"Scale_out", float{1.0f}}, {"Scale_in_eltwise", float{1.0f}}, {"Scale_weights", std::vector<float>{1.0f}}, {"force_fp32_output", bool{false}}, {"workspace_size_MB", int{512}}, {"exhaustive_search", bool{false}} }},
    {"depthwise_conv2d_grad", { {"use_cudnn", bool{false}}, {"fuse_relu_before_depthwise_conv", bool{false}}, {"use_mkldnn", bool{false}}, {"use_quantizer", bool{false}}, {"mkldnn_data_type", std::string{"float32"}}, {"fuse_relu", bool{false}}, {"fuse_activation", std::string{""}}, {"fuse_alpha", float{0.0f}}, {"fuse_beta", float{0.0f}}, {"use_addto", bool{false}}, {"fuse_residual_connection", bool{false}}, {"Scale_in", float{1.0f}}, {"Scale_out", float{1.0f}}, {"Scale_in_eltwise", float{1.0f}}, {"Scale_weights", std::vector<float>{1.0f}}, {"force_fp32_output", bool{false}}, {"workspace_size_MB", int{512}}, {"exhaustive_search", bool{false}} }}
  };

  g_extra_attrs_checker_ = {
    {"conv2d", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_relu_before_depthwise_conv", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_quantizer", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_relu", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("fuse_activation", "")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_alpha", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_beta", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_addto", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_residual_connection", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_in", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_out", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_in_eltwise", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::vector<float>>("Scale_weights", {1.0f})(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("force_fp32_output", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("workspace_size_MB", 512)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("exhaustive_search", false)(attr_map, only_check_exist_value);} }},
    {"conv2d_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_relu_before_depthwise_conv", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_quantizer", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_relu", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("fuse_activation", "")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_alpha", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_beta", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_addto", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_residual_connection", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_in", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_out", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_in_eltwise", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::vector<float>>("Scale_weights", {1.0f})(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("force_fp32_output", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("workspace_size_MB", 512)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("exhaustive_search", false)(attr_map, only_check_exist_value);} }},
    {"conv2d_fusion", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_relu_before_depthwise_conv", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_quantizer", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_relu", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("fuse_activation", "")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_alpha", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_beta", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_addto", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_residual_connection", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_in", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_out", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_in_eltwise", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::vector<float>>("Scale_weights", {1.0f})(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("force_fp32_output", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("workspace_size_MB", 512)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("exhaustive_search", false)(attr_map, only_check_exist_value);} }},
    {"depthwise_conv2d", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_relu_before_depthwise_conv", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_quantizer", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_relu", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("fuse_activation", "")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_alpha", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_beta", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_addto", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_residual_connection", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_in", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_out", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_in_eltwise", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::vector<float>>("Scale_weights", {1.0f})(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("force_fp32_output", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("workspace_size_MB", 512)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("exhaustive_search", false)(attr_map, only_check_exist_value);} }},
    {"depthwise_conv2d_grad", { [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_cudnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_relu_before_depthwise_conv", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_mkldnn", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_quantizer", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("mkldnn_data_type", "float32")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_relu", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::string>("fuse_activation", "")(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_alpha", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("fuse_beta", 0.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("use_addto", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("fuse_residual_connection", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_in", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_out", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<float>("Scale_in_eltwise", 1.0f)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<std::vector<float>>("Scale_weights", {1.0f})(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("force_fp32_output", false)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<int>("workspace_size_MB", 512)(attr_map, only_check_exist_value);},
      [](framework::AttributeMap* attr_map, bool only_check_exist_value)-> void { ExtraAttrChecker<bool>("exhaustive_search", false)(attr_map, only_check_exist_value);} }}
  };
}

}  // namespace operators
}  // namespace paddle
